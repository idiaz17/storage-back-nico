generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Add this line
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String
  email    String @unique
  password String
  role     String @default("user")

  clientId String? // ðŸ‘ˆ link user to a client (if theyâ€™re an external client user)
  client   Client? @relation(fields: [clientId], references: [id])

  // Relations
  contracts Contract[] @relation("ContractCreatedBy")
  units     Unit[]     @relation("UnitCreatedBy")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  Notification Notification[]
  Activity     Activity[]
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  notes     String?
  hasPaid   Boolean  @default(false)
  hasKeys   Boolean  @default(false)
  createdAt DateTime @default(now())

  contracts    Contract[]
  units        Unit[]
  payment      Payment[]
  notification Notification[]
  Activity     Activity[]
  User         User[]
}

model Unit {
  id             Int        @id @default(autoincrement())
  type           String
  status         UnitStatus @default(available)
  monthlyRate    Float
  latitude       Float?
  longitude      Float?
  address_street String? // <-- new optional field

  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  createdBy Int
  user      User @relation(fields: [createdBy], references: [id], name: "UnitCreatedBy")

  contracts Contract[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

enum UnitStatus {
  available
  rented
  maintenance
}

model Contract {
  id          Int       @id @default(autoincrement())
  clientId    String
  unitId      Int
  monthlyRate Float
  startDate   DateTime
  endDate     DateTime?
  title       String
  content     String
  draft       Boolean   @default(true)
  signed      Boolean   @default(false) // âœ… Add this
  signedAt    DateTime? // âœ… Track when signed
  signedBy    Int? // âœ… Who signed (User id)

  createdBy Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client       Client         @relation(fields: [clientId], references: [id])
  unit         Unit           @relation(fields: [unitId], references: [id])
  user         User           @relation(fields: [createdBy], references: [id], name: "ContractCreatedBy")
  Notification Notification[]
}

model Notification {
  id            String   @id @default(uuid())
  userId        Int
  clientId      String // required
  title         String
  message       String
  type          String   @default("info")
  isRead        Boolean  @default(false)
  relatedEntity String?
  contractId    Int?
  entityId      String? // optional for payments
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  client   Client    @relation(fields: [clientId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])
  payment  Payment?  @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String        @id @default(uuid())
  clientId  String
  unitId    Int
  amount    Float
  status    PaymentStatus @default(pending)
  paidAt    DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt

  client       Client         @relation(fields: [clientId], references: [id])
  unit         Unit           @relation(fields: [unitId], references: [id])
  Notification Notification[]
}

enum PaymentStatus {
  pending
  paid
  overdue
}

model Activity {
  id        String   @id @default(uuid())
  userId    Int
  clientId  String
  type      String
  details   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
}
